# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Run Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test-ios:
    name: Test Library (iOS Simulator)
    runs-on: macos-26
    steps:
    - uses: actions/checkout@v4

    - name: List available simulators
      run: xcrun simctl list devices available | grep iPhone || true

    - name: Clean test results
      run: |
        rm -rf test-results

    - name: Build and test Library
      run: |
        set -o pipefail
        xcodebuild test \
          -scheme Libraries-Package \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 17 Pro,OS=26.1' \
          -resultBundlePath test-results/results.xcresult \
          -enableCodeCoverage YES \
          -skipPackagePluginValidation
      continue-on-error: false

    - name: Install xcbeautify
      if: always()
      run: |
        brew install xcbeautify

    - name: Convert xcresult to JUnit XML
      if: always()
      run: |
        mkdir -p test-results
        xcrun xcresulttool get --format json --path test-results/results.xcresult \
          | xcbeautify --report junit --report-path test-results/results.xml || true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results

    - name: Publish Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Main Libraries - Unit Tests Report
        path: test-results/results.xml
        reporter: java-junit
